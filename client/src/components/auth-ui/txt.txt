'use client'

import { useState } from 'react'
import { useSignUpForm } from '../hooks/use-signup-form'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"
import { AlertCircle, CheckCircle2 } from 'lucide-react'

export function SignUpForm() {
  const { form, onSubmit, isSubmitting } = useSignUpForm()
  const { register, handleSubmit, formState: { errors, dirtyFields } } = form

  return (
    <Card className="w-[350px]">
      <CardHeader>
        <CardTitle>Sign Up</CardTitle>
        <CardDescription>Create your account to get started.</CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">Name</Label>
            <div className="relative">
              <Input
                id="name"
                type="text"
                {...register('name')}
                className={`pr-10 ${errors.name ? 'border-red-500' : dirtyFields.name ? 'border-green-500' : ''}`}
              />
              {errors.name && <AlertCircle className="absolute right-3 top-1/2 transform -translate-y-1/2 text-red-500" />}
              {!errors.name && dirtyFields.name && <CheckCircle2 className="absolute right-3 top-1/2 transform -translate-y-1/2 text-green-500" />}
            </div>
            {errors.name && <p className="text-red-500 text-sm">{errors.name.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <div className="relative">
              <Input
                id="email"
                type="email"
                {...register('email')}
                className={`pr-10 ${errors.email ? 'border-red-500' : dirtyFields.email ? 'border-green-500' : ''}`}
              />
              {errors.email && <AlertCircle className="absolute right-3 top-1/2 transform -translate-y-1/2 text-red-500" />}
              {!errors.email && dirtyFields.email && <CheckCircle2 className="absolute right-3 top-1/2 transform -translate-y-1/2 text-green-500" />}
            </div>
            {errors.email && <p className="text-red-500 text-sm">{errors.email.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <div className="relative">
              <Input
                id="password"
                type="password"
                {...register('password')}
                className={`pr-10 ${errors.password ? 'border-red-500' : dirtyFields.password ? 'border-green-500' : ''}`}
              />
              {errors.password && <AlertCircle className="absolute right-3 top-1/2 transform -translate-y-1/2 text-red-500" />}
              {!errors.password && dirtyFields.password && <CheckCircle2 className="absolute right-3 top-1/2 transform -translate-y-1/2 text-green-500" />}
            </div>
            {errors.password && <p className="text-red-500 text-sm">{errors.password.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="age">Age</Label>
            <div className="relative">
              <Input
                id="age"
                type="number"
                {...register('age', { valueAsNumber: true })}
                className={`pr-10 ${errors.age ? 'border-red-500' : dirtyFields.age ? 'border-green-500' : ''}`}
              />
              {errors.age && <AlertCircle className="absolute right-3 top-1/2 transform -translate-y-1/2 text-red-500" />}
              {!errors.age && dirtyFields.age && <CheckCircle2 className="absolute right-3 top-1/2 transform -translate-y-1/2 text-green-500" />}
            </div>
            {errors.age && <p className="text-red-500 text-sm">{errors.age.message}</p>}
          </div>

          <Button type="submit" className="w-full" disabled={isSubmitting}>
            {isSubmitting ? 'Signing Up...' : 'Sign Up'}
          </Button>
        </form>
      </CardContent>
    </Card>
  )
}

