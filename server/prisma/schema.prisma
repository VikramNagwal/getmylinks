generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  username        String    @unique
  name            String?
  email           String    @unique
  emailVerified   Boolean   @default(false)
  verificationUid String?   @unique
  emailVerifiedAt DateTime?
  secretToken     String?
  passwordHash    String    @unique @db.VarChar(160)
  refreshToken    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  links   link[]
  Profile Profile?

  @@index([email, id])
  @@map("users")
}

model link {
  id         String    @id @default(cuid())
  userId     String
  shortUrl   String    @unique @db.VarChar(400)
  url        String
  totalViews Int       @default(0)
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  analytics Analytics?

  @@index([userId, shortUrl])
  @@map("links")
}

model Analytics {
  id          String   @id @default(cuid())
  linkId      String   @unique
  clickedAt   DateTime @default(now())
  userAgent   String?
  ipAddress   String?
  referer     String?
  countryCode String?  @db.VarChar(2)
  deviceType  String?  @db.VarChar(220)
  browser     String?  @db.VarChar(200)
  os          String?  @db.VarChar(150)
  createdAt   DateTime @default(now())

  link link @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId])
  @@map("analytics")
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  avatar    String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("profiles")
}
